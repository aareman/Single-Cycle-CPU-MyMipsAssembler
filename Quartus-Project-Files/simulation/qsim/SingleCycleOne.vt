// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/06/2016 19:19:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Instruction_man
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Instruction_man_vlg_sample_tst(
	CLK,
	ENABLE,
	INPUT,
	INrange,
	NEXT,
	WRE,
	sampler_tx
);
input  CLK;
input  ENABLE;
input [7:0] INPUT;
input [1:0] INrange;
input  NEXT;
input  WRE;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or ENABLE or INPUT or INrange or NEXT or WRE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Instruction_man_vlg_check_tst (
	a,
	answer,
	b,
	c,
	ControlSIG,
	d,
	e,
	f,
	FUNC,
	g,
	h,
	Icomplete,
	OP,
	RD,
	RS,
	RT,
	SHAMT,
	TRUE,
	sampler_rx
);
input [6:0] a;
input [31:0] answer;
input [6:0] b;
input [6:0] c;
input  ControlSIG;
input [6:0] d;
input [6:0] e;
input [6:0] f;
input [5:0] FUNC;
input [6:0] g;
input [6:0] h;
input [31:0] Icomplete;
input [5:0] OP;
input [4:0] RD;
input [4:0] RS;
input [4:0] RT;
input [4:0] SHAMT;
input  TRUE;
input sampler_rx;

reg [6:0] a_expected;
reg [31:0] answer_expected;
reg [6:0] b_expected;
reg [6:0] c_expected;
reg  ControlSIG_expected;
reg [6:0] d_expected;
reg [6:0] e_expected;
reg [6:0] f_expected;
reg [5:0] FUNC_expected;
reg [6:0] g_expected;
reg [6:0] h_expected;
reg [31:0] Icomplete_expected;
reg [5:0] OP_expected;
reg [4:0] RD_expected;
reg [4:0] RS_expected;
reg [4:0] RT_expected;
reg [4:0] SHAMT_expected;
reg  TRUE_expected;

reg [6:0] a_prev;
reg [31:0] answer_prev;
reg [6:0] b_prev;
reg [6:0] c_prev;
reg  ControlSIG_prev;
reg [6:0] d_prev;
reg [6:0] e_prev;
reg [6:0] f_prev;
reg [5:0] FUNC_prev;
reg [6:0] g_prev;
reg [6:0] h_prev;
reg [31:0] Icomplete_prev;
reg [5:0] OP_prev;
reg [4:0] RD_prev;
reg [4:0] RS_prev;
reg [4:0] RT_prev;
reg [4:0] SHAMT_prev;
reg  TRUE_prev;

reg [31:0] answer_expected_prev;
reg  TRUE_expected_prev;

reg [31:0] last_answer_exp;
reg  last_TRUE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	answer_prev = answer;
	b_prev = b;
	c_prev = c;
	ControlSIG_prev = ControlSIG;
	d_prev = d;
	e_prev = e;
	f_prev = f;
	FUNC_prev = FUNC;
	g_prev = g;
	h_prev = h;
	Icomplete_prev = Icomplete;
	OP_prev = OP;
	RD_prev = RD;
	RS_prev = RS;
	RT_prev = RT;
	SHAMT_prev = SHAMT;
	TRUE_prev = TRUE;
end

// update expected /o prevs

always @(trigger)
begin
	answer_expected_prev = answer_expected;
	TRUE_expected_prev = TRUE_expected;
end


// expected answer[ 31 ]
initial
begin
	answer_expected[31] = 1'bX;
	answer_expected[31] = #999000 1'b0;
end 
// expected answer[ 30 ]
initial
begin
	answer_expected[30] = 1'bX;
	answer_expected[30] = #999000 1'b0;
end 
// expected answer[ 29 ]
initial
begin
	answer_expected[29] = 1'bX;
	answer_expected[29] = #999000 1'b0;
end 
// expected answer[ 28 ]
initial
begin
	answer_expected[28] = 1'bX;
	answer_expected[28] = #999000 1'b0;
end 
// expected answer[ 27 ]
initial
begin
	answer_expected[27] = 1'bX;
	answer_expected[27] = #999000 1'b0;
end 
// expected answer[ 26 ]
initial
begin
	answer_expected[26] = 1'bX;
	answer_expected[26] = #999000 1'b0;
end 
// expected answer[ 25 ]
initial
begin
	answer_expected[25] = 1'bX;
	answer_expected[25] = #999000 1'b0;
end 
// expected answer[ 24 ]
initial
begin
	answer_expected[24] = 1'bX;
	answer_expected[24] = #999000 1'b0;
end 
// expected answer[ 23 ]
initial
begin
	answer_expected[23] = 1'bX;
	answer_expected[23] = #999000 1'b0;
end 
// expected answer[ 22 ]
initial
begin
	answer_expected[22] = 1'bX;
	answer_expected[22] = #999000 1'b0;
end 
// expected answer[ 21 ]
initial
begin
	answer_expected[21] = 1'bX;
	answer_expected[21] = #999000 1'b0;
end 
// expected answer[ 20 ]
initial
begin
	answer_expected[20] = 1'bX;
	answer_expected[20] = #999000 1'b0;
end 
// expected answer[ 19 ]
initial
begin
	answer_expected[19] = 1'bX;
	answer_expected[19] = #999000 1'b0;
end 
// expected answer[ 18 ]
initial
begin
	answer_expected[18] = 1'bX;
	answer_expected[18] = #999000 1'b0;
end 
// expected answer[ 17 ]
initial
begin
	answer_expected[17] = 1'bX;
	answer_expected[17] = #999000 1'b0;
end 
// expected answer[ 16 ]
initial
begin
	answer_expected[16] = 1'bX;
	answer_expected[16] = #999000 1'b0;
end 
// expected answer[ 15 ]
initial
begin
	answer_expected[15] = 1'bX;
	answer_expected[15] = #999000 1'b0;
end 
// expected answer[ 14 ]
initial
begin
	answer_expected[14] = 1'bX;
	answer_expected[14] = #999000 1'b0;
end 
// expected answer[ 13 ]
initial
begin
	answer_expected[13] = 1'bX;
	answer_expected[13] = #999000 1'b0;
end 
// expected answer[ 12 ]
initial
begin
	answer_expected[12] = 1'bX;
	answer_expected[12] = #999000 1'b0;
end 
// expected answer[ 11 ]
initial
begin
	answer_expected[11] = 1'bX;
	answer_expected[11] = #999000 1'b0;
end 
// expected answer[ 10 ]
initial
begin
	answer_expected[10] = 1'bX;
	answer_expected[10] = #999000 1'b0;
end 
// expected answer[ 9 ]
initial
begin
	answer_expected[9] = 1'bX;
	answer_expected[9] = #999000 1'b0;
end 
// expected answer[ 8 ]
initial
begin
	answer_expected[8] = 1'bX;
	answer_expected[8] = #999000 1'b0;
end 
// expected answer[ 7 ]
initial
begin
	answer_expected[7] = 1'bX;
	answer_expected[7] = #999000 1'b0;
end 
// expected answer[ 6 ]
initial
begin
	answer_expected[6] = 1'bX;
	answer_expected[6] = #999000 1'b0;
end 
// expected answer[ 5 ]
initial
begin
	answer_expected[5] = 1'bX;
	answer_expected[5] = #999000 1'b0;
end 
// expected answer[ 4 ]
initial
begin
	answer_expected[4] = 1'bX;
	answer_expected[4] = #999000 1'b0;
end 
// expected answer[ 3 ]
initial
begin
	answer_expected[3] = 1'bX;
	answer_expected[3] = #999000 1'b0;
end 
// expected answer[ 2 ]
initial
begin
	answer_expected[2] = 1'bX;
	answer_expected[2] = #999000 1'b0;
end 
// expected answer[ 1 ]
initial
begin
	answer_expected[1] = 1'bX;
	answer_expected[1] = #999000 1'b0;
end 
// expected answer[ 0 ]
initial
begin
	answer_expected[0] = 1'bX;
	answer_expected[0] = #999000 1'b0;
end 

// expected TRUE
initial
begin
	TRUE_expected = 1'bX;
	TRUE_expected = #1999000 1'b0;
end 
// generate trigger
always @(a_expected or a or answer_expected or answer or b_expected or b or c_expected or c or ControlSIG_expected or ControlSIG or d_expected or d or e_expected or e or f_expected or f or FUNC_expected or FUNC or g_expected or g or h_expected or h or Icomplete_expected or Icomplete or OP_expected or OP or RD_expected or RD or RS_expected or RS or RT_expected or RT or SHAMT_expected or SHAMT or TRUE_expected or TRUE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected answer = %b | expected b = %b | expected c = %b | expected ControlSIG = %b | expected d = %b | expected e = %b | expected f = %b | expected FUNC = %b | expected g = %b | expected h = %b | expected Icomplete = %b | expected OP = %b | expected RD = %b | expected RS = %b | expected RT = %b | expected SHAMT = %b | expected TRUE = %b | ",a_expected_prev,answer_expected_prev,b_expected_prev,c_expected_prev,ControlSIG_expected_prev,d_expected_prev,e_expected_prev,f_expected_prev,FUNC_expected_prev,g_expected_prev,h_expected_prev,Icomplete_expected_prev,OP_expected_prev,RD_expected_prev,RS_expected_prev,RT_expected_prev,SHAMT_expected_prev,TRUE_expected_prev);
	$display("| real a = %b | real answer = %b | real b = %b | real c = %b | real ControlSIG = %b | real d = %b | real e = %b | real f = %b | real FUNC = %b | real g = %b | real h = %b | real Icomplete = %b | real OP = %b | real RD = %b | real RS = %b | real RT = %b | real SHAMT = %b | real TRUE = %b | ",a_prev,answer_prev,b_prev,c_prev,ControlSIG_prev,d_prev,e_prev,f_prev,FUNC_prev,g_prev,h_prev,Icomplete_prev,OP_prev,RD_prev,RS_prev,RT_prev,SHAMT_prev,TRUE_prev);
`endif
	if (
		( answer_expected_prev[0] !== 1'bx ) && ( answer_prev[0] !== answer_expected_prev[0] )
		&& ((answer_expected_prev[0] !== last_answer_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[0] = answer_expected_prev[0];
	end
	if (
		( answer_expected_prev[1] !== 1'bx ) && ( answer_prev[1] !== answer_expected_prev[1] )
		&& ((answer_expected_prev[1] !== last_answer_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[1] = answer_expected_prev[1];
	end
	if (
		( answer_expected_prev[2] !== 1'bx ) && ( answer_prev[2] !== answer_expected_prev[2] )
		&& ((answer_expected_prev[2] !== last_answer_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[2] = answer_expected_prev[2];
	end
	if (
		( answer_expected_prev[3] !== 1'bx ) && ( answer_prev[3] !== answer_expected_prev[3] )
		&& ((answer_expected_prev[3] !== last_answer_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[3] = answer_expected_prev[3];
	end
	if (
		( answer_expected_prev[4] !== 1'bx ) && ( answer_prev[4] !== answer_expected_prev[4] )
		&& ((answer_expected_prev[4] !== last_answer_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[4] = answer_expected_prev[4];
	end
	if (
		( answer_expected_prev[5] !== 1'bx ) && ( answer_prev[5] !== answer_expected_prev[5] )
		&& ((answer_expected_prev[5] !== last_answer_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[5] = answer_expected_prev[5];
	end
	if (
		( answer_expected_prev[6] !== 1'bx ) && ( answer_prev[6] !== answer_expected_prev[6] )
		&& ((answer_expected_prev[6] !== last_answer_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[6] = answer_expected_prev[6];
	end
	if (
		( answer_expected_prev[7] !== 1'bx ) && ( answer_prev[7] !== answer_expected_prev[7] )
		&& ((answer_expected_prev[7] !== last_answer_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[7] = answer_expected_prev[7];
	end
	if (
		( answer_expected_prev[8] !== 1'bx ) && ( answer_prev[8] !== answer_expected_prev[8] )
		&& ((answer_expected_prev[8] !== last_answer_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[8] = answer_expected_prev[8];
	end
	if (
		( answer_expected_prev[9] !== 1'bx ) && ( answer_prev[9] !== answer_expected_prev[9] )
		&& ((answer_expected_prev[9] !== last_answer_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[9] = answer_expected_prev[9];
	end
	if (
		( answer_expected_prev[10] !== 1'bx ) && ( answer_prev[10] !== answer_expected_prev[10] )
		&& ((answer_expected_prev[10] !== last_answer_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[10] = answer_expected_prev[10];
	end
	if (
		( answer_expected_prev[11] !== 1'bx ) && ( answer_prev[11] !== answer_expected_prev[11] )
		&& ((answer_expected_prev[11] !== last_answer_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[11] = answer_expected_prev[11];
	end
	if (
		( answer_expected_prev[12] !== 1'bx ) && ( answer_prev[12] !== answer_expected_prev[12] )
		&& ((answer_expected_prev[12] !== last_answer_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[12] = answer_expected_prev[12];
	end
	if (
		( answer_expected_prev[13] !== 1'bx ) && ( answer_prev[13] !== answer_expected_prev[13] )
		&& ((answer_expected_prev[13] !== last_answer_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[13] = answer_expected_prev[13];
	end
	if (
		( answer_expected_prev[14] !== 1'bx ) && ( answer_prev[14] !== answer_expected_prev[14] )
		&& ((answer_expected_prev[14] !== last_answer_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[14] = answer_expected_prev[14];
	end
	if (
		( answer_expected_prev[15] !== 1'bx ) && ( answer_prev[15] !== answer_expected_prev[15] )
		&& ((answer_expected_prev[15] !== last_answer_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[15] = answer_expected_prev[15];
	end
	if (
		( answer_expected_prev[16] !== 1'bx ) && ( answer_prev[16] !== answer_expected_prev[16] )
		&& ((answer_expected_prev[16] !== last_answer_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[16] = answer_expected_prev[16];
	end
	if (
		( answer_expected_prev[17] !== 1'bx ) && ( answer_prev[17] !== answer_expected_prev[17] )
		&& ((answer_expected_prev[17] !== last_answer_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[17] = answer_expected_prev[17];
	end
	if (
		( answer_expected_prev[18] !== 1'bx ) && ( answer_prev[18] !== answer_expected_prev[18] )
		&& ((answer_expected_prev[18] !== last_answer_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[18] = answer_expected_prev[18];
	end
	if (
		( answer_expected_prev[19] !== 1'bx ) && ( answer_prev[19] !== answer_expected_prev[19] )
		&& ((answer_expected_prev[19] !== last_answer_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[19] = answer_expected_prev[19];
	end
	if (
		( answer_expected_prev[20] !== 1'bx ) && ( answer_prev[20] !== answer_expected_prev[20] )
		&& ((answer_expected_prev[20] !== last_answer_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[20] = answer_expected_prev[20];
	end
	if (
		( answer_expected_prev[21] !== 1'bx ) && ( answer_prev[21] !== answer_expected_prev[21] )
		&& ((answer_expected_prev[21] !== last_answer_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[21] = answer_expected_prev[21];
	end
	if (
		( answer_expected_prev[22] !== 1'bx ) && ( answer_prev[22] !== answer_expected_prev[22] )
		&& ((answer_expected_prev[22] !== last_answer_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[22] = answer_expected_prev[22];
	end
	if (
		( answer_expected_prev[23] !== 1'bx ) && ( answer_prev[23] !== answer_expected_prev[23] )
		&& ((answer_expected_prev[23] !== last_answer_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[23] = answer_expected_prev[23];
	end
	if (
		( answer_expected_prev[24] !== 1'bx ) && ( answer_prev[24] !== answer_expected_prev[24] )
		&& ((answer_expected_prev[24] !== last_answer_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[24] = answer_expected_prev[24];
	end
	if (
		( answer_expected_prev[25] !== 1'bx ) && ( answer_prev[25] !== answer_expected_prev[25] )
		&& ((answer_expected_prev[25] !== last_answer_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[25] = answer_expected_prev[25];
	end
	if (
		( answer_expected_prev[26] !== 1'bx ) && ( answer_prev[26] !== answer_expected_prev[26] )
		&& ((answer_expected_prev[26] !== last_answer_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[26] = answer_expected_prev[26];
	end
	if (
		( answer_expected_prev[27] !== 1'bx ) && ( answer_prev[27] !== answer_expected_prev[27] )
		&& ((answer_expected_prev[27] !== last_answer_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[27] = answer_expected_prev[27];
	end
	if (
		( answer_expected_prev[28] !== 1'bx ) && ( answer_prev[28] !== answer_expected_prev[28] )
		&& ((answer_expected_prev[28] !== last_answer_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[28] = answer_expected_prev[28];
	end
	if (
		( answer_expected_prev[29] !== 1'bx ) && ( answer_prev[29] !== answer_expected_prev[29] )
		&& ((answer_expected_prev[29] !== last_answer_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[29] = answer_expected_prev[29];
	end
	if (
		( answer_expected_prev[30] !== 1'bx ) && ( answer_prev[30] !== answer_expected_prev[30] )
		&& ((answer_expected_prev[30] !== last_answer_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[30] = answer_expected_prev[30];
	end
	if (
		( answer_expected_prev[31] !== 1'bx ) && ( answer_prev[31] !== answer_expected_prev[31] )
		&& ((answer_expected_prev[31] !== last_answer_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port answer[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", answer_expected_prev);
		$display ("     Real value = %b", answer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_answer_exp[31] = answer_expected_prev[31];
	end
	if (
		( TRUE_expected_prev !== 1'bx ) && ( TRUE_prev !== TRUE_expected_prev )
		&& ((TRUE_expected_prev !== last_TRUE_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TRUE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TRUE_expected_prev);
		$display ("     Real value = %b", TRUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_TRUE_exp = TRUE_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Instruction_man_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg ENABLE;
reg [7:0] INPUT;
reg [1:0] INrange;
reg NEXT;
reg WRE;
// wires                                               
wire [6:0] a;
wire [31:0] answer;
wire [6:0] b;
wire [6:0] c;
wire ControlSIG;
wire [6:0] d;
wire [6:0] e;
wire [6:0] f;
wire [5:0] FUNC;
wire [6:0] g;
wire [6:0] h;
wire [31:0] Icomplete;
wire [5:0] OP;
wire [4:0] RD;
wire [4:0] RS;
wire [4:0] RT;
wire [4:0] SHAMT;
wire TRUE;

wire sampler;                             

// assign statements (if any)                          
Instruction_man i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.answer(answer),
	.b(b),
	.c(c),
	.CLK(CLK),
	.ControlSIG(ControlSIG),
	.d(d),
	.e(e),
	.ENABLE(ENABLE),
	.f(f),
	.FUNC(FUNC),
	.g(g),
	.h(h),
	.Icomplete(Icomplete),
	.\INPUT (INPUT),
	.INrange(INrange),
	.NEXT(NEXT),
	.OP(OP),
	.RD(RD),
	.RS(RS),
	.RT(RT),
	.SHAMT(SHAMT),
	.TRUE(TRUE),
	.WRE(WRE)
);

// WRE
initial
begin
	WRE = 1'b1;
end 
// \INPUT [ 7 ]
initial
begin
	INPUT[7] = 1'b0;
end 
// \INPUT [ 6 ]
initial
begin
	INPUT[6] = 1'b0;
end 
// \INPUT [ 5 ]
initial
begin
	INPUT[5] = 1'b0;
end 
// \INPUT [ 4 ]
initial
begin
	INPUT[4] = 1'b0;
end 
// \INPUT [ 3 ]
initial
begin
	INPUT[3] = 1'b0;
end 
// \INPUT [ 2 ]
initial
begin
	INPUT[2] = 1'b0;
end 
// \INPUT [ 1 ]
initial
begin
	INPUT[1] = 1'b0;
end 
// \INPUT [ 0 ]
initial
begin
	INPUT[0] = 1'b0;
end 
// INrange[ 1 ]
initial
begin
	INrange[1] = 1'b0;
end 
// INrange[ 0 ]
initial
begin
	INrange[0] = 1'b0;
end 

// NEXT
initial
begin
	NEXT = 1'b1;
	# 100000;
	repeat(99)
	begin
		NEXT = 1'b0;
		NEXT = #100000 1'b1;
		# 100000;
	end
	NEXT = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

Instruction_man_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.ENABLE(ENABLE),
	.INPUT(INPUT),
	.INrange(INrange),
	.NEXT(NEXT),
	.WRE(WRE),
	.sampler_tx(sampler)
);

Instruction_man_vlg_check_tst tb_out(
	.a(a),
	.answer(answer),
	.b(b),
	.c(c),
	.ControlSIG(ControlSIG),
	.d(d),
	.e(e),
	.f(f),
	.FUNC(FUNC),
	.g(g),
	.h(h),
	.Icomplete(Icomplete),
	.OP(OP),
	.RD(RD),
	.RS(RS),
	.RT(RT),
	.SHAMT(SHAMT),
	.TRUE(TRUE),
	.sampler_rx(sampler)
);
endmodule

